// frontend/components/Shop.js
class Shop {
    constructor(telegramUser) {
        this.telegramUser = telegramUser;
        this.gameState = null;
        this.shopItems = null;
        this.activeCategory = 'all';
        this.init();
    }

    async init() {
        await Promise.all([this.loadGameState(), this.loadShopItems()]);
    }

    async loadGameState() {
        try {
            const response = await fetch(`/api/game/state?user_id=${this.telegramUser.id}`);
            const data = await response.json();
            
            if (data.error) {
                this.showError(data.error);
                return;
            }
            
            this.gameState = data;
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
            console.error('Load state error:', error);
        }
    }

    async loadShopItems() {
        try {
            const response = await fetch('/api/shop/items');
            const data = await response.json();
            
            if (data.items) {
                this.shopItems = data.items;
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞');
            console.error('Load shop error:', error);
        }
    }

    render() {
        return `
            <div class="shop-container">
                <h2>üõí –ú–∞–≥–∞–∑–∏–Ω</h2>
                
                <div class="player-balance">
                    <div class="balance-card">
                        <span>üí∞ –ë–∞–ª–∞–Ω—Å:</span>
                        <span class="balance-amount">${this.gameState?.user?.money || 0}‚ÇΩ</span>
                    </div>
                </div>

                <div class="shop-categories">
                    <button class="category-btn ${this.activeCategory === 'all' ? 'active' : ''}" 
                            onclick="shop.setCategory('all')">–í—Å–µ</button>
                    <button class="category-btn ${this.activeCategory === 'worms' ? 'active' : ''}" 
                            onclick="shop.setCategory('worms')">ü™± –ß–µ—Ä–≤–∏</button>
                    <button class="category-btn ${this.activeCategory === 'beer' ? 'active' : ''}" 
                            onclick="shop.setCategory('beer')">üç∫ –ü–∏–≤–æ</button>
                    <button class="category-btn ${this.activeCategory === 'gear' ? 'active' : ''}" 
                            onclick="shop.setCategory('gear')">üé£ –°–Ω–∞—Å—Ç–∏</button>
                    <button class="category-btn ${this.activeCategory === 'bait' ? 'active' : ''}" 
                            onclick="shop.setCategory('bait')">ü™± –ù–∞–∂–∏–≤–∫–∞</button>
                    <button class="category-btn ${this.activeCategory === 'accessory' ? 'active' : ''}" 
                            onclick="shop.setCategory('accessory')">üîî –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</button>
                </div>

                <div class="shop-items">
                    ${this.renderShopItems()}
                </div>

                <div class="bag-upgrade">
                    <h3>üéí –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥—Å–∞–∫–∞</h3>
                    <div class="upgrade-info">
                        –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${this.gameState?.user?.bag_limit || 20} –º–µ—Å—Ç
                    </div>
                    <button class="btn btn-primary" onclick="shop.buyBagExtension()">
                        üéí –†–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–¥—Å–∞–∫ (+10 –º–µ—Å—Ç)
                    </button>
                </div>
            </div>
        `;
    }

    renderShopItems() {
        if (!this.shopItems) return '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';

        let itemsToShow = [];

        if (this.activeCategory === 'worms') {
            return this.renderWormsSection();
        } else if (this.activeCategory === 'all') {
            itemsToShow = Object.entries(this.shopItems);
        } else {
            itemsToShow = Object.entries(this.shopItems).filter(([_, item]) => item.type === this.activeCategory);
        }

        if (itemsToShow.length === 0) {
            return '<div class="empty-shop">–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç</div>';
        }

        return itemsToShow.map(([name, item]) => this.renderShopItem(name, item)).join('');
    }

    renderWormsSection() {
        return `
            <div class="worms-section">
                <div class="shop-item">
                    <div class="item-header">
                        <div class="item-icon">ü™±</div>
                        <div class="item-name">–ß–µ—Ä–≤—å –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π</div>
                    </div>
                    <div class="item-description">–ù–∞–∂–∏–≤–∫–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏</div>
                    <div class="item-price">üí∞ 10‚ÇΩ –∑–∞ —à—Ç—É–∫—É</div>
                    <div class="item-actions">
                        <button class="btn btn-small" onclick="shop.buyWorms(1)">–ö—É–ø–∏—Ç—å 1</button>
                        <button class="btn btn-small" onclick="shop.buyWorms(10)">–ö—É–ø–∏—Ç—å 10</button>
                        <button class="btn btn-small" onclick="shop.buyWorms(50)">–ö—É–ø–∏—Ç—å 50</button>
                    </div>
                </div>
            </div>
        `;
    }

    renderShopItem(name, item) {
        const canAfford = this.gameState?.user?.money >= item.price;
        const slotOccupied = this.gameState?.equipped_items?.[item.type];
        const effects = this.formatEffects(item.effect);

        return `
            <div class="shop-item ${!canAfford ? 'cannot-afford' : ''}">
                <div class="item-header">
                    <div class="item-icon">${this.getItemIcon(item.type)}</div>
                    <div class="item-name">${name}</div>
                </div>
                <div class="item-type">${this.getTypeName(item.type)}</div>
                <div class="item-effects">${effects}</div>
                <div class="item-price">üí∞ ${item.price}‚ÇΩ</div>
                <div class="item-actions">
                    <button class="btn btn-small ${canAfford && !slotOccupied ? 'btn-primary' : 'btn-secondary'}" 
                            onclick="shop.buyItem('${name}')"
                            ${!canAfford || slotOccupied ? 'disabled' : ''}>
                        ${!canAfford ? '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥' : slotOccupied ? '–°–ª–æ—Ç –∑–∞–Ω—è—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
            </div>
        `;
    }

    getItemIcon(type) {
        const icons = {
            'beer': 'üç∫',
            'gear': 'üé£',
            'bait': 'ü™±',
            'accessory': 'üîî'
        };
        return icons[type] || 'üì¶';
    }

    getTypeName(type) {
        const names = {
            'beer': 'üç∫ –ü–∏–≤–æ',
            'gear': 'üé£ –°–Ω–∞—Å—Ç—å',
            'bait': 'ü™± –ù–∞–∂–∏–≤–∫–∞',
            'accessory': 'üîî –ê–∫—Å–µ—Å—Å—É–∞—Ä'
        };
        return names[type] || type;
    }

    formatEffects(effects) {
        const effectDescriptions = {
            "chance_bonus": (val) => `üéØ –®–∞–Ω—Å —É–ª–æ–≤–∞: +${(val * 100).toFixed(0)}%`,
            "rare_weight_bonus": (val) => `‚ö° –í–µ—Å —Ä–µ–¥–∫–æ–π: +${(val * 100).toFixed(0)}%`,
            "price_multiplier": (val) => `üí∞ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã: x${val.toFixed(1)}`,
            "crit_chance": (val) => `üé≤ –®–∞–Ω—Å –∫—Ä–∏—Ç–∞: +${(val * 100).toFixed(2)}%`
        };

        return Object.entries(effects)
            .map(([key, value]) => effectDescriptions[key]?.(value) || `${key}: ${value}`)
            .join('<br>');
    }

    setCategory(category) {
        this.activeCategory = category;
        this.updateUI();
    }

    async buyItem(itemName) {
        try {
            const response = await fetch('/api/shop/buy', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    user_id: this.telegramUser.id,
                    item_name: itemName 
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.showNotification(`‚úÖ –ö—É–ø–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${itemName}`);
                await this.loadGameState();
                this.updateUI();
            } else {
                this.showError(data.error);
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø—Ä–µ–¥–º–µ—Ç–∞');
        }
    }

    async buyWorms(count) {
        try {
            const response = await fetch('/api/shop/buy_worms', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    user_id: this.telegramUser.id,
                    count: count 
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.showNotification(`ü™± –ö—É–ø–ª–µ–Ω–æ ${count} —á–µ—Ä–≤–µ–π –∑–∞ ${data.cost}‚ÇΩ`);
                await this.loadGameState();
                this.updateUI();
            } else {
                this.showError(data.error);
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —á–µ—Ä–≤–µ–π');
        }
    }

    async buyBagExtension() {
        try {
            const response = await fetch('/api/shop/buy_bag', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    user_id: this.telegramUser.id
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.showNotification(`üéí –ü–æ–¥—Å–∞–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ ${data.new_bag_limit} –º–µ—Å—Ç!`);
                await this.loadGameState();
                this.updateUI();
            } else {
                this.showError(data.error);
            }
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø–æ–¥—Å–∞–∫–∞');
        }
    }

    updateUI() {
        const container = document.querySelector('.shop-container');
        if (container) {
            container.innerHTML = this.render();
        }
    }

    showNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'notification active';
        notification.textContent = message;
        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    showError(message) {
        this.showNotification('‚ùå ' + message);
    }
}

export default Shop;