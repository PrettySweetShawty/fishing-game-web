# backend/game_logic.py
import random
import json
import os
from math import isclose
from datetime import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
DATA_FILE = "users.json"

# –î–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
fishes = [
    {"name": "–ö–∞—Ä–∞—Å—å", "type": "–∫–∞—Ä–∞—Å—å", "min_weight": 0.2, "max_weight": 1.5, "abs_max": 2.5, "price_per_kg": 50},
    {"name": "–©—É–∫–∞", "type": "—â—É–∫–∞", "min_weight": 1.0, "max_weight": 5.0, "abs_max": 35.0, "price_per_kg": 150},
    {"name": "–°–æ–º", "type": "—Å–æ–º", "min_weight": 5.0, "max_weight": 50.0, "abs_max": 450.0, "price_per_kg": 200},
]

rare_fishes = [{
    "name": "–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞",
    "price_per_kg": 1000000,
    "min_weight": 1.0,
    "max_weight": 1.0,
    "rarity": "legendary"
}]

all_items = {
    "–°–≤–µ—Ç–ª–æ–µ –ø–∏–≤–æ": {
        "type": "beer",
        "price": 700,
        "effect": {"chance_bonus": 0.05},
    },
    "–ö—Ä–µ–ø–∫–æ–µ –ø–∏–≤–æ": {
        "type": "beer",
        "price": 7000,
        "effect": {"chance_bonus": 0.1},
    },
    "–°—É—Å–ª–æ –¥—Ä–µ–≤–Ω–µ–≥–æ —Ä—ã–±–∞–∫–∞": {
        "type": "beer",
        "price": 210000,
        "effect": {"chance_bonus": 0.2},
    },
    "–°–≤–µ—Ç–ª–æ–µ –Ω–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏–≤–æ": {
        "type": "beer",
        "price": 500000,
        "effect": {"crit_chance": 0.0025},
    },
    "–ñ–∏–¥–∫–æ–µ –∑–æ–ª–æ—Ç–æ": {
        "type": "beer",
        "price": 120000,
        "effect": {"price_multiplier": 1.25},
    },
    "–ü–∏–≤–æ –ë–æ–ª—å—à–æ–π —Å–æ–º": {
        "type": "beer",
        "price": 125000,
        "effect": {"rare_weight_bonus": 0.07},
    },
    "–£–ª—å—Ç—Ä–∞–±–ª–µ—Å–Ω–∞": {
        "type": "gear",
        "price": 2800,
        "effect": {"rare_weight_bonus": 0.03},
    },
    "–ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –±–ª–µ—Å–Ω–∞": {
        "type": "gear",
        "price": 28000,
        "effect": {"rare_weight_bonus": 0.07},
    },
    "–ë–ª–µ—Å–Ω–∞ –ª–µ–≥–µ–Ω–¥": {
        "type": "gear",
        "price": 420000,
        "effect": {"rare_weight_bonus": 0.15},
    },
    "–®–∏—Ä–æ–∫–∞—è –±–ª–µ—Å–Ω–∞": {
        "type": "gear",
        "price": 500000,
        "effect": {"crit_chance": 0.0025},
    },
    "–ó–æ–ª–æ—Ç–∞—è –±–ª–µ—Å–Ω–∞": {
        "type": "gear",
        "price": 120000,
        "effect": {"price_multiplier": 1.25},
    },
    "–£–ª–æ–≤–∏—Å—Ç–∞—è –±–ª–µ—Å–Ω–∞": {
        "type": "gear",
        "price": 17000,
        "effect": {"chance_bonus": 0.1},
    },
    "–ó–æ–ª–æ—Ç–æ–π —á–µ—Ä–≤—å": {
        "type": "bait",
        "price": 1680,
        "effect": {"price_multiplier": 1.1},
    },
    "–ê–ª–º–∞–∑–Ω–∞—è –ª–∏—á–∏–Ω–∫–∞": {
        "type": "bait",
        "price": 21000,
        "effect": {"price_multiplier": 1.25},
    },
    "–ò–∫—Ä–∞ –¥—Ä–µ–≤–Ω–µ–≥–æ –æ—Å–µ—Ç—Ä–∞": {
        "type": "bait",
        "price": 560000,
        "effect": {"price_multiplier": 1.5},
    },
    "–ö—Ä—É–ø–Ω—ã–π —Ä–∞–∫": {
        "type": "bait",
        "price": 500000,
        "effect": {"crit_chance": 0.0025},
    },
    "–õ–∏—á–∏–Ω–∫–∞ —Ä—É—á–µ–π–Ω–∏–∫–∞": {
        "type": "bait",
        "price": 32000,
        "effect": {"chance_bonus": 0.1},
    },
    "–£–ø–∏—Ç–∞–Ω–Ω—ã–π –º–æ—Ç—ã–ª—å": {
        "type": "bait",
        "price": 125000,
        "effect": {"rare_weight_bonus": 0.07},
    },
    "–ö–æ–ª–æ–∫–æ–ª—å—á–∏–∫ —É–¥–∞—á–∏": {
        "type": "accessory",
        "price": 4900,
        "effect": {"crit_chance": 0.001},
    },
    "–ö—É–ª–æ–Ω –ù–µ–ø—Ç—É–Ω–∞": {
        "type": "accessory",
        "price": 70000,
        "effect": {"crit_chance": 0.0025},
    },
    "–ê–º—É–ª–µ—Ç –≤–µ–ª–∏–∫–æ–≥–æ –∫–ª—ë–≤–∞": {
        "type": "accessory",
        "price": 980000,
        "effect": {"crit_chance": 0.005},
    },
    "–ó–æ–ª–æ—Ç–æ–π –º–µ–¥–∞–ª—å–æ–Ω": {
        "type": "accessory",
        "price": 120000,
        "effect": {"price_multiplier": 1.25},
    },
    "–ß–µ—Ç—ã—Ä–µ—Ö–ª–∏—Å—Ç–Ω—ã–π –∫–ª–µ–≤–µ—Ä": {
        "type": "accessory",
        "price": 32000,
        "effect": {"chance_bonus": 0.1},
    },
    "–ë—Ä–µ–ª–æ–∫ –±—É—Ä–≥–µ—Ä": {
        "type": "accessory",
        "price": 125000,
        "effect": {"rare_weight_bonus": 0.07},
    }
}

achievements_list = [
    {
        "id": "golden_fish",
        "name": "üåü –ò—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å –∂–µ–ª–∞–Ω–∏–µ",
        "description": "–ü–æ–π–º–∞–π –ó–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É",
        "condition": lambda fish: fish.get("name") == "–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞"
    },
    {
        "id": "fish_weight_14_88",
        "name": "üéØ –ë–æ–≥ —Ä—ã–±–∞–ª–∫–∏",
        "description": "–ü–æ–π–º–∞–π —Ä—ã–±—É –≤–µ—Å–æ–º —Ä–æ–≤–Ω–æ 14.88 –∫–≥",
        "condition": lambda fish: isclose(fish.get('weight', 0), 14.88, abs_tol=0.01)
    },
    {
        "id": "fish_weight_100",
        "name": "üí™ –ú–æ–Ω—Å—Ç—Ä —Ä—ã–±–∞–ª–∫–∏",
        "description": "–ü–æ–π–º–∞–π —Ä—ã–±—É –≤–µ—Å–æ–º –±–æ–ª–µ–µ 100 –∫–≥",
        "condition": lambda fish: fish.get("weight", 0) > 100
    },
    {
        "id": "rich_5m",
        "name": "ü§ë –ú–∏–ª–ª–∏–æ–Ω–µ—Ä",
        "description": "–ò–º–µ—Ç—å –Ω–∞ —Å—á–µ—Ç—É 5 000 000 —Ä—É–±–ª–µ–π –∏ –±–æ–ª—å—à–µ",
        "condition": lambda user: user.get("money", 0) >= 5_000_000
    },
    {
        "id": "big_money",
        "name": "üí∞ –ë–æ–≥–∞—á",
        "description": "–ü–æ–π–º–∞–π —Ä—ã–±—É –¥–æ—Ä–æ–∂–µ 9980‚ÇΩ",
        "condition": lambda fish: fish.get('price', 0) > 9980
    },
    {
        "id": "fish_price_1488",
        "name": "üí∏ –†—ã–±–Ω—ã–π –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä",
        "description": "–ü–æ–π–º–∞–π —Ä—ã–±—É —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ä–æ–≤–Ω–æ 1488‚ÇΩ",
        "condition": lambda fish: fish.get('price', 0) == 1488
    },
    {
        "id": "pike_weight_2_28",
        "name": "üëÄ –í–æ—Ç —Ç—ã –∏ –ø—Ä–∏—Å–µ–ª",
        "description": "–ü–æ–π–º–∞–π —â—É–∫—É –≤–µ—Å–æ–º —Ä–æ–≤–Ω–æ 2.28 –∫–≥",
        "condition": lambda fish: fish.get('type', '').lower() == "—â—É–∫–∞" and isclose(fish.get('weight', 0), 2.28, abs_tol=0.01)
    },
    {
        "id": "catfish_weight_8_12",
        "name": "‚öì –ì–ª—É–±–∏–Ω—ã –ü–∏—Ç–µ—Ä–∞",
        "description": "–ü–æ–π–º–∞–π —Å–æ–º–∞ –≤–µ—Å–æ–º —Ä–æ–≤–Ω–æ 8.12 –∫–≥",
        "condition": lambda fish: fish.get('type', '').lower() == "—Å–æ–º" and isclose(fish.get('weight', 0), 8.12, abs_tol=0.01)
    },
    {
        "id": "fish_price_812",
        "name": "üåâ –°–µ–≤–µ—Ä–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞",
        "description": "–ü–æ–π–º–∞–π —Ä—ã–±—É —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ä–æ–≤–Ω–æ 812‚ÇΩ",
        "condition": lambda fish: fish.get('price', 0) == 812
    }
]

effect_descriptions = {
    "chance_bonus": "—à–∞–Ω—Å –ø–æ–π–º–∞—Ç—å —Ä—ã–±—É +{:.0%}",
    "rare_weight_bonus": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å —Ä–µ–¥–∫–æ–π —Ä—ã–±—ã +{:.0%}",
    "price_multiplier": "—Ü–µ–Ω–∞ —Ä—ã–±—ã x{:.1f}",
    "crit_chance": "—à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª–æ–≤–∞ +{:.2%}"
}

class FishingGame:
    def __init__(self):
        self.users = self.load_users()
    
    def load_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if os.path.exists(DATA_FILE):
            try:
                with open(DATA_FILE, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
                return {}
        return {}
    
    def save_users(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(self.users, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False
    
    def register_user(self, user_id, name):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = str(user_id)
        
        if user_id not in self.users:
            self.users[user_id] = {
                "name": name,
                "worms": 10,
                "money": 0,
                "catch": [],
                "last_catch": None,
                "achievements": [],
                "bag_limit": 20,
                "inventory": [],
                "items": {
                    "beer": None,
                    "gear": None,
                    "bait": None,
                    "accessory": None
                },
                "created_at": datetime.now().isoformat(),
                "last_active": datetime.now().isoformat()
            }
            self.save_users()
            return {"status": "registered", "user": self.users[user_id]}
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.users[user_id]["name"] = name
            self.users[user_id]["last_active"] = datetime.now().isoformat()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
            if "inventory" not in self.users[user_id]:
                self.users[user_id]["inventory"] = []
            if "items" not in self.users[user_id]:
                self.users[user_id]["items"] = {
                    "beer": None,
                    "gear": None,
                    "bait": None,
                    "accessory": None
                }
            
            self.save_users()
            return {"status": "existing", "user": self.users[user_id]}
    
    def get_user_state(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = str(user_id)
        if user_id not in self.users:
            return None
        
        user = self.users[user_id]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        bonuses = self._calculate_bonuses(user)
        
        return {
            "user": {
                "name": user["name"],
                "money": user["money"],
                "worms": user["worms"],
                "bag_limit": user.get("bag_limit", 20),
                "achievements": user.get("achievements", [])
            },
            "inventory": user.get("inventory", []),
            "equipped_items": user.get("items", {}),
            "podsak": user.get("catch", []),
            "last_catch": user.get("last_catch"),
            "bonuses": bonuses
        }
    
    def _calculate_bonuses(self, user):
        """–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
        chance_bonus = 0.0
        price_multiplier = 1.0
        rare_weight_bonus = 0.0
        crit_chance = 0.0
        
        for slot in ["beer", "gear", "bait", "accessory"]:
            item = user.get("items", {}).get(slot)
            if item:
                effects = item.get("effect", {})
                chance_bonus += effects.get("chance_bonus", 0.0)
                rare_weight_bonus += effects.get("rare_weight_bonus", 0.0)
                price_multiplier *= effects.get("price_multiplier", 1.0)
                crit_chance += effects.get("crit_chance", 0.0)
        
        return {
            "chance_bonus": chance_bonus,
            "price_multiplier": price_multiplier,
            "rare_weight_bonus": rare_weight_bonus,
            "crit_chance": crit_chance
        }
    
    def _generate_weight(self, fish_data, rare_bonus=0.0):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—Å–∞ —Ä—ã–±—ã —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤"""
        # –®–∞–Ω—Å –ø–æ–π–º–∞—Ç—å –ó–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É (0.0001%)
        if random.random() < 0.000001:
            fish_data = rare_fishes[0]
            return 1.0, fish_data, True
        
        fish_data = random.choice(fishes)
        
        if fish_data["type"] == "—Å–æ–º" and random.random() < (0.001 + rare_bonus):
            weight = round(
                fish_data["max_weight"] + 0.01 +
                min(random.expovariate(1) * 10, 450.0), 2
            )
        else:
            weight = round(random.uniform(fish_data["min_weight"], fish_data["max_weight"]), 2)
        
        return weight, fish_data, False
    
    def _check_achievements(self, user, fish=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        new_achievements = []
        
        for achievement in achievements_list:
            if achievement["id"] not in user.get("achievements", []):
                got_achievement = False
                try:
                    if fish and achievement["condition"](fish):
                        got_achievement = True
                except Exception:
                    pass
                
                if not got_achievement:
                    try:
                        if achievement["condition"](user):
                            got_achievement = True
                    except Exception:
                        pass
                
                if got_achievement:
                    user.setdefault("achievements", []).append(achievement["id"])
                    new_achievements.append(achievement)
        
        return new_achievements
    
    def fish(self, user_id):
        """–ü—Ä–æ—Ü–µ—Å—Å —Ä—ã–±–∞–ª–∫–∏"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        
        if user["worms"] <= 0:
            return {"error": "No worms"}
        
        user["worms"] -= 1
        user["last_active"] = datetime.now().isoformat()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã
        bonuses = self._calculate_bonuses(user)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        broken_items = self._update_item_durability(user)
        
        base_fish_chance = 0.7
        
        if random.random() < base_fish_chance + bonuses["chance_bonus"]:
            # –£—Å–ø–µ—à–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞
            weight, fish_data, is_golden = self._generate_weight(None, bonuses["rare_weight_bonus"])
            
            if is_golden:
                price = int(weight * fish_data["price_per_kg"] * bonuses["price_multiplier"])
                fish = {
                    "name": fish_data["name"],
                    "weight": weight,
                    "price": price,
                    "type": "–∑–æ–ª–æ—Ç–∞—è",
                    "is_golden": True,
                    "caught_at": datetime.now().isoformat()
                }
            else:
                price = int(weight * fish_data["price_per_kg"] * bonuses["price_multiplier"])
                fish = {
                    "name": fish_data["name"],
                    "weight": weight,
                    "price": price,
                    "type": fish_data["type"],
                    "caught_at": datetime.now().isoformat()
                }
            
            user["last_catch"] = fish
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            new_achievements = self._check_achievements(user, fish)
            
            self.save_users()
            
            result = {
                "success": True,
                "fish": fish,
                "new_achievements": [{"name": ach["name"], "description": ach["description"]} for ach in new_achievements],
                "worms_left": user["worms"],
                "broken_items": broken_items
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥–∏–≥–∞–Ω—Ç—Å–∫—É—é —Ä—ã–±—É (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
            if weight > 200 and not is_golden:
                result["is_giant"] = True
            
            return result
        else:
            # –ù–µ—É–¥–∞—á–Ω–∞—è —Ä—ã–±–∞–ª–∫–∞
            user["last_catch"] = None
            self.save_users()
            
            fail_messages = [
                "–õ–µ—Å–∫–∞ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å –≤ –∫–∞–º—ã—à–∞—Ö üåø –∏ —Ç—ã —É—Å—Ç—Ä–æ–∏–ª –±–æ–π —Å –ø—Ä–∏—Ä–æ–¥–æ–π 1v1.",
                "–¢—ã –∑–µ–≤–Ω—É–ª... –∏ —É–¥–æ—á–∫–∞ —É–ª–µ—Ç–µ–ª–∞ –≤ –≤–æ–¥—É üò¥üé£üåä",
                "–†—ã–±–∞ —Å–º–æ—Ç—Ä–µ–ª–∞, –Ω–æ —Å–∫–∞–∑–∞–ª–∞: ¬´–Ω–µ —Å–µ–≥–æ–¥–Ω—è¬ª üêüüôÖ‚Äç‚ôÇÔ∏è",
                "–ü–æ–∫–∞ —Ç—ã –∫–æ–≤—ã—Ä—è–ª—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, —á–µ—Ä–≤—å —Å–±–µ–∂–∞–ª üêõüí®",
                "–¢—ã –ø–æ–π–º–∞–ª –Ω–æ—Å–æ–∫. –û–ø—ã—Ç–Ω—ã–π. –° —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. üß¶",
                "–ú–µ—Å—Ç–Ω—ã–µ —Ä—ã–±—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–≥–æ —Ä—ã–±–∞–∫–∞ üì±üé£",
                "–©—É–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —Ç–µ–±–µ —Å—Ä–µ–¥–Ω–∏–π –ø–ª–∞–≤–Ω–∏–∫ –∏ —É–ø–ª—ã–ª–∞ üñïüêü",
                "–ü–∏–≤–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å ‚Äî –∏ —Ä—ã–±–∞ —Å–∫–∞–∑–∞–ª–∞ ¬´–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è¬ª üç∫‚û°Ô∏èüö´"
            ]
            
            return {
                "success": False,
                "message": random.choice(fail_messages),
                "worms_left": user["worms"],
                "broken_items": broken_items
            }
    
    def _update_item_durability(self, user):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–º–∞–Ω–Ω—ã—Ö"""
        broken_items = []
        
        for slot in ["beer", "gear", "bait", "accessory"]:
            item = user.get("items", {}).get(slot)
            if item:
                if "durability" not in item:
                    item["durability"] = 500
                
                item["durability"] -= 1
                
                if item["durability"] <= 0:
                    broken_items.append(item["name"])
                    user["items"][slot] = None
        
        return broken_items
    
    def sell_fish(self, user_id):
        """–ü—Ä–æ–¥–∞–∂–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–π–º–∞–Ω–Ω–æ–π —Ä—ã–±—ã"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        fish = user.get("last_catch")
        
        if not fish:
            return {"error": "No fish to sell"}
        
        user["money"] += fish["price"]
        user["last_catch"] = None
        user["last_active"] = datetime.now().isoformat()
        
        self.save_users()
        
        return {
            "success": True,
            "money_earned": fish["price"],
            "new_balance": user["money"],
            "fish_sold": fish
        }
    
    def keep_fish(self, user_id):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä—ã–±—É –≤ –ø–æ–¥—Å–∞–∫"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        fish = user.get("last_catch")
        
        if not fish:
            return {"error": "No fish to keep"}
        
        if len(user["catch"]) >= user.get("bag_limit", 20):
            return {"error": "Podsak full"}
        
        user["catch"].append(fish)
        user["last_catch"] = None
        user["last_active"] = datetime.now().isoformat()
        
        self.save_users()
        
        return {
            "success": True,
            "fish_kept": fish,
            "podsak_count": len(user["catch"])
        }
    
    def sell_fish_from_podsak(self, user_id, fish_index):
        """–ü—Ä–æ–¥–∞–∂–∞ —Ä—ã–±—ã –∏–∑ –ø–æ–¥—Å–∞–∫–∞"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        
        if fish_index < 0 or fish_index >= len(user["catch"]):
            return {"error": "Invalid fish index"}
        
        fish = user["catch"].pop(fish_index)
        user["money"] += fish["price"]
        user["last_active"] = datetime.now().isoformat()
        
        self.save_users()
        
        return {
            "success": True,
            "money_earned": fish["price"],
            "new_balance": user["money"],
            "fish_sold": fish
        }
    
    def buy_item(self, user_id, item_name):
        """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        if item_name not in all_items:
            return {"error": "Item not found"}
        
        user = self.users[user_id]
        item_info = all_items[item_name]
        price = item_info["price"]
        
        if user["money"] < price:
            return {"error": "Not enough money"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç
        slot = item_info["type"]
        if user["items"].get(slot) is not None:
            return {"error": "Slot occupied"}
        
        # –ü–æ–∫—É–ø–∫–∞
        user["money"] -= price
        user["items"][slot] = {
            "name": item_name,
            "durability": 500,
            "effect": item_info["effect"]
        }
        user["last_active"] = datetime.now().isoformat()
        
        self.save_users()
        
        return {
            "success": True,
            "item_bought": item_name,
            "new_balance": user["money"]
        }
    
    def buy_worms(self, user_id, count):
        """–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–≤–µ–π"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        cost = count * 10
        
        if user["money"] < cost:
            return {"error": "Not enough money"}
        
        user["money"] -= cost
        user["worms"] += count
        user["last_active"] = datetime.now().isoformat()
        
        self.save_users()
        
        return {
            "success": True,
            "worms_bought": count,
            "cost": cost,
            "new_balance": user["money"],
            "total_worms": user["worms"]
        }
    
    def buy_bag_extension(self, user_id):
        """–ü–æ–∫—É–ø–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–¥—Å–∞–∫–∞"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        current_limit = user.get("bag_limit", 20)
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        cost = 10_000_000 if current_limit >= 40 else 500_000
        
        if user["money"] < cost:
            return {"error": "Not enough money"}
        
        user["money"] -= cost
        user["bag_limit"] = current_limit + 10
        user["last_active"] = datetime.now().isoformat()
        
        self.save_users()
        
        return {
            "success": True,
            "new_bag_limit": user["bag_limit"],
            "cost": cost,
            "new_balance": user["money"]
        }
    
    def unequip_item(self, user_id, slot):
        """–°–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        valid_slots = ["beer", "gear", "bait", "accessory"]
        
        if slot not in valid_slots:
            return {"error": "Invalid slot"}
        
        item = user["items"].get(slot)
        if not item:
            return {"error": "Slot already empty"}
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –µ—â–µ –∏–º–µ–µ—Ç –ø—Ä–æ—á–Ω–æ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if item.get("durability", 0) > 0:
            user.setdefault("inventory", []).append(item)
        
        user["items"][slot] = None
        user["last_active"] = datetime.now().isoformat()
        
        self.save_users()
        
        return {
            "success": True,
            "item_unequipped": item["name"],
            "slot": slot
        }
    
    def equip_item(self, user_id, item_index):
        """–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        inventory = user.get("inventory", [])
        
        if item_index < 0 or item_index >= len(inventory):
            return {"error": "Invalid item index"}
        
        item = inventory[item_index]
        item_type = all_items.get(item["name"], {}).get("type")
        
        if not item_type:
            return {"error": "Unknown item type"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç
        if user["items"].get(item_type) is not None:
            return {"error": "Slot occupied"}
        
        # –≠–∫–∏–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
        user["items"][item_type] = item
        del inventory[item_index]
        user["last_active"] = datetime.now().isoformat()
        
        self.save_users()
        
        return {
            "success": True,
            "item_equipped": item["name"],
            "slot": item_type
        }
    
    def get_top_players(self, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤"""
        if not self.users:
            return []
        
        sorted_users = sorted(self.users.items(), key=lambda x: x[1]["money"], reverse=True)
        
        top_list = []
        for i, (user_id, user_data) in enumerate(sorted_users[:limit], 1):
            top_list.append({
                "rank": i,
                "name": user_data["name"],
                "money": user_data["money"],
                "achievements_count": len(user_data.get("achievements", []))
            })
        
        return top_list
    
    def get_achievements(self, user_id=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        if not user_id:
            return achievements_list
        
        user_id = str(user_id)
        if user_id not in self.users:
            return {"error": "User not found"}
        
        user = self.users[user_id]
        user_achievements = user.get("achievements", [])
        
        achievements_with_status = []
        for ach in achievements_list:
            achievements_with_status.append({
                "id": ach["id"],
                "name": ach["name"],
                "description": ach["description"],
                "unlocked": ach["id"] in user_achievements
            })
        
        return achievements_with_status
    
    def get_shop_items(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞"""
        return all_items

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã
game_instance = FishingGame()